6979683: inconsistent interaction of reference cast with box/unbox conversions leaves out a useful case
Summary: Allow casts which narrow and then unbox.
Reviewed-by: mcimadamore

diff --git a/src/share/classes/com/sun/tools/javac/code/Types.java b/src/share/classes/com/sun/tools/javac/code/Types.java
--- a/src/share/classes/com/sun/tools/javac/code/Types.java
+++ b/src/share/classes/com/sun/tools/javac/code/Types.java
@@ -914,7 +914,7 @@
             return true;
 
         if (t.isPrimitive() != s.isPrimitive())
-            return allowBoxing && isConvertible(t, s, warn);
+            return allowBoxing && (isConvertible(t, s, warn) || isConvertible(s, t, warn));
 
         if (warn != warnStack.head) {
             try {
diff --git a/src/share/classes/com/sun/tools/javac/comp/Lower.java b/src/share/classes/com/sun/tools/javac/comp/Lower.java
--- a/src/share/classes/com/sun/tools/javac/comp/Lower.java
+++ b/src/share/classes/com/sun/tools/javac/comp/Lower.java
@@ -2869,8 +2869,17 @@
     /** Unbox an object to a primitive value. */
     JCExpression unbox(JCExpression tree, Type primitive) {
         Type unboxedType = types.unboxedType(tree.type);
-        // note: the "primitive" parameter is not used.  There muse be
-        // a conversion from unboxedType to primitive.
+        if (unboxedType.tag == NONE) {
+            unboxedType = primitive;
+            if (!unboxedType.isPrimitive())
+                throw new AssertionError(unboxedType);
+            make_at(tree.pos());
+            tree = make.TypeCast(types.boxedClass(unboxedType).type, tree);
+        } else {
+            // There must be a conversion from unboxedType to primitive.
+            if (!types.isSubtype(unboxedType, primitive))
+                throw new AssertionError(tree);
+        }
         make_at(tree.pos());
         Symbol valueSym = lookupMethod(tree.pos(),
                                        unboxedType.tsym.name.append(names.Value), // x.intValue()
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD34.java b/test/tools/javac/6979683/TestCast6979683_BAD34.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD34.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile/fail/ref=TestCast6979683_BAD34.java.errlog -XDrawDiagnostics TestCast6979683_BAD34.java
+ */
+
+public class TestCast6979683_BAD34 {
+    static boolean zconvBAD1(Number o) { return o; } //BAD
+    //...
+    //...
+    //...
+    //...
+    //...
+}
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD34.java.errlog b/test/tools/javac/6979683/TestCast6979683_BAD34.java.errlog
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD34.java.errlog
@@ -0,0 +1,2 @@
+TestCast6979683_BAD34.java:34:49: compiler.err.prob.found.req: (compiler.misc.incompatible.types), java.lang.Number, boolean
+1 error
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD35.java b/test/tools/javac/6979683/TestCast6979683_BAD35.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD35.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile/fail/ref=TestCast6979683_BAD35.java.errlog -XDrawDiagnostics TestCast6979683_BAD35.java
+ */
+
+public class TestCast6979683_BAD35 {
+    //...
+    static int iconvBAD1(Number o) { return o; } //BAD: cast needed
+    //...
+    //...
+    //...
+    //...
+}
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD35.java.errlog b/test/tools/javac/6979683/TestCast6979683_BAD35.java.errlog
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD35.java.errlog
@@ -0,0 +1,2 @@
+TestCast6979683_BAD35.java:35:45: compiler.err.prob.found.req: (compiler.misc.incompatible.types), java.lang.Number, int
+1 error
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD36.java b/test/tools/javac/6979683/TestCast6979683_BAD36.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD36.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile/fail/ref=TestCast6979683_BAD36.java.errlog -XDrawDiagnostics TestCast6979683_BAD36.java
+ */
+
+public class TestCast6979683_BAD36 {
+    //...
+    //...
+    static int iconvBAD2(Comparable<Integer> o) { return o; } //BAD: cast needed
+    //...
+    //...
+    //...
+}
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD36.java.errlog b/test/tools/javac/6979683/TestCast6979683_BAD36.java.errlog
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD36.java.errlog
@@ -0,0 +1,2 @@
+TestCast6979683_BAD36.java:36:58: compiler.err.prob.found.req: (compiler.misc.incompatible.types), java.lang.Comparable<java.lang.Integer>, int
+1 error
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD37.java b/test/tools/javac/6979683/TestCast6979683_BAD37.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD37.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile/fail/ref=TestCast6979683_BAD37.java.errlog -XDrawDiagnostics TestCast6979683_BAD37.java
+ */
+
+public class TestCast6979683_BAD37 {
+    //...
+    //...
+    //...
+    static int iconvBAD3(Comparable<Short> o) { return (int)o; } //BAD: wrong instance
+    //...
+    //...
+}
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD37.java.errlog b/test/tools/javac/6979683/TestCast6979683_BAD37.java.errlog
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD37.java.errlog
@@ -0,0 +1,2 @@
+TestCast6979683_BAD37.java:37:61: compiler.err.prob.found.req: (compiler.misc.inconvertible.types), java.lang.Comparable<java.lang.Short>, int
+1 error
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD38.java b/test/tools/javac/6979683/TestCast6979683_BAD38.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD38.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile/fail/ref=TestCast6979683_BAD38.java.errlog -XDrawDiagnostics TestCast6979683_BAD38.java
+ */
+
+public class TestCast6979683_BAD38 {
+    //...
+    //...
+    //...
+    //...
+    static float cconvBAD1(Comparable<Character> o) { return o; } //BAD
+    //...
+}
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD38.java.errlog b/test/tools/javac/6979683/TestCast6979683_BAD38.java.errlog
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD38.java.errlog
@@ -0,0 +1,2 @@
+TestCast6979683_BAD38.java:38:62: compiler.err.prob.found.req: (compiler.misc.incompatible.types), java.lang.Comparable<java.lang.Character>, float
+1 error
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD39.java b/test/tools/javac/6979683/TestCast6979683_BAD39.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD39.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile/fail/ref=TestCast6979683_BAD39.java.errlog -XDrawDiagnostics TestCast6979683_BAD39.java
+ */
+
+public class TestCast6979683_BAD39 {
+    //...
+    //...
+    //...
+    //...
+    //...
+    static float cconvBAD2(Number o) { return (char)o; } //BAD
+}
diff --git a/test/tools/javac/6979683/TestCast6979683_BAD39.java.errlog b/test/tools/javac/6979683/TestCast6979683_BAD39.java.errlog
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_BAD39.java.errlog
@@ -0,0 +1,2 @@
+TestCast6979683_BAD39.java:39:53: compiler.err.prob.found.req: (compiler.misc.inconvertible.types), java.lang.Number, char
+1 error
diff --git a/test/tools/javac/6979683/TestCast6979683_GOOD.java b/test/tools/javac/6979683/TestCast6979683_GOOD.java
new file mode 100644
--- /dev/null
+++ b/test/tools/javac/6979683/TestCast6979683_GOOD.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 6979683
+ * @summary Verify that casts can narrow and unbox at the same time
+ * @author jrose
+ *
+ * @compile TestCast6979683_GOOD.java
+ * @run main TestCast6979683_GOOD
+ */
+
+public class TestCast6979683_GOOD {
+    public static void main(String... av) {
+        bugReportExample();
+        for (int x = -1; x <= 2; x++) {
+            zconvTests(x != 0);
+            iconvTests(x);
+            bconvTests((byte)x);
+            cconvTests((char)x);
+        }
+        System.out.println("Successfully ran "+tests+" tests.");
+    }
+
+    static int tests;
+    static void assertEquals(Object x, Object y) {
+        if (!x.equals(y)) {
+            throw new RuntimeException("assertEquals: "+x+" != "+y);
+        }
+        ++tests;
+    }
+
+    static void bugReportExample() {
+  {} // example in bug report:
+  Object x = (Object)1;
+  int y = (int)x;
+  {} // end example
+    }
+
+    static boolean zconv1(Boolean o) { return o; }
+    static boolean zconv2(Object o) { return (boolean)o; }
+    static boolean zconv3(Comparable<Boolean> o) { return (boolean)o; }
+
+    static void zconvTests(boolean x) {
+        assertEquals(x, zconv1(x));
+        assertEquals(x, zconv2(x));
+        assertEquals(x, zconv3(x));
+    }
+
+    static int iconv1(Integer o) { return o; }
+    static int iconv2(Object o) { return (int)o; }
+    static int iconv3(java.io.Serializable o) { return (int)o; }
+    static int iconv4(Number o) { return (int)o; }
+    static int iconv5(Comparable<Integer> o) { return (int)o; }
+
+    static void iconvTests(int x) {
+        assertEquals(x, iconv1(x));
+        assertEquals(x, iconv2(x));
+        assertEquals(x, iconv3(x));
+        assertEquals(x, iconv4(x));
+        assertEquals(x, iconv5(x));
+    }
+
+    static float bconv1(Byte o) { return o; }  // note type "float"
+    static float bconv2(Object o) { return (byte)o; }
+    static float bconv3(java.io.Serializable o) { return (byte)o; }
+    static float bconv4(Number o) { return (byte)o; }
+
+    static void bconvTests(byte x) {
+        float xf = x;
+        assertEquals(xf, bconv1(x));
+        assertEquals(xf, bconv2(x));
+        assertEquals(xf, bconv3(x));
+        assertEquals(xf, bconv4(x));
+    }
+
+    static float cconv1(Character o) { return o; }  // note type "float"
+    static float cconv2(Object o) { return (char)o; }
+    static float cconv3(java.io.Serializable o) { return (char)o; }
+    static float cconv4(Comparable<Character> o) { return (char)o; }
+
+    static void cconvTests(char x) {
+        float xf = x;
+        assertEquals(xf, cconv1(x));
+        assertEquals(xf, cconv2(x));
+        assertEquals(xf, cconv3(x));
+        assertEquals(xf, cconv4(x));
+    }
+
+}
