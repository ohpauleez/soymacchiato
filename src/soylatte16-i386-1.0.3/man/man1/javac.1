.'" t
." @(#)javac.1  SMI;
."  Copyright (C) 2004 Sun Microsystems, Inc. All Rights Reserved.
." `
.TH javac 1 "07 Aug 2006"
." Generated by html2man

.LP
.SH NAME
javac \- Java programming language compiler
.LP
.SH "SYNOPSIS"
.LP

.LP
.nf
\f3
.fl
\fP\f3javac\fP [ options ] [ sourcefiles ] [ @argfiles ]
.fl
.fi

.LP
.LP
Arguments may be in any order.
.LP
.RS 3

.LP
.RS 3
.TP 3
options 
Command\-line options. 
.TP 3
sourcefiles 
One or more source files to be compiled (such as MyClass.java). 
.TP 3
@argfiles 
One or more files that lists options and source files. The \f2\-J\fP options are not allowed in these files. 
.RE

.LP
.RE
.SH "DESCRIPTION"
.LP

.LP
.LP
The \f3javac\fP tool reads class and interface definitions, written in the Java programming language, and compiles them into bytecode class files.
.LP
.LP
There are two ways to pass source code filenames to \f3javac\fP:
.LP
.RS 3
.TP 2
o
For a small number of source files, simply list the file names on the command line. 
.TP 2
o
For a large number of source files, list the file names in a file, separated by blanks or line breaks. Then use the list file name on the \f3javac\fP command line, preceded by an \f3@\fP character. 
.RE

.LP
.LP
Source code file names must have \f2.java\fP suffixes, class file names must have \f2.class\fP suffixes, and both source and class files must have root names that identify the class. For example, a class called \f2MyClass\fP would be written in a source file called \f2MyClass.java\fP and compiled into a bytecode class file called \f2MyClass.class\fP.
.LP
.LP
Inner class definitions produce additional class files. These class files have names combining the inner and outer class names, such as \f2MyClass$MyInnerClass.class\fP.
.LP
.LP
You should arrange source files in a directory tree that reflects their package tree. For example, if you keep all your source files in \f3/workspace\fP, the source code for \f2com.mysoft.mypack.MyClass\fP should be in \f3/workspace/com/mysoft/mypack/MyClass.java\fP.
.LP
.LP
By default, the compiler puts each class file in the same directory as its source file. You can specify a separate destination directory with \f3\-d\fP (see Options, below).
.LP
.SH "SEARCHING FOR TYPES"
.LP

.LP
.LP
When compiling a source file, the compiler often needs information about a type whose definition did not appear in the source files given on the command line. The compiler needs type information for every class or interface used, extended, or implemented in the source file. This includes classes and interfaces not explicitly mentioned in the source file but which provide information through inheritance.
.LP
.LP
For example, when you subclass \f3java.applet.Applet\fP, you are also using \f3Applet's\fP ancestor classes: \f3java.awt.Panel\fP, \f3java.awt.Container\fP, \f3java.awt.Component\fP, and \f3java.lang.Object\fP.
.LP
.LP
When the compiler needs type information, it looks for a source file or class file which defines the type. The compiler searches for class files first in the bootstrap and extension classes, then in the user class path (which by default is the current directory). The user class path is defined by setting the \f3CLASSPATH\fP environment variable or by using the \f3\-classpath\fP command line option. (For details, see Setting the Class Path).
.LP
.LP
If you set the \-sourcepath option, the compiler searches the indicated path for source files; otherwise the compiler searches the user class path for both class files and source files.
.LP
.LP
You can specify different bootstrap or extension classes with the \f3\-bootclasspath\fP and \f3\-extdirs\fP options; see Cross\-Compilation Options below.
.LP
.LP
A successful type search may produce a class file, a source file, or both. Here is how \f3javac\fP handles each situation:
.LP
.RS 3
.TP 2
o
\f2Search produces a class file but no source file:\fP \f3javac\fP uses the class file. 
.TP 2
o
\f2Search produces a source file but no class file:\fP \f3javac\fP compiles the source file and uses the resulting class file. 
.TP 2
o
\f2Search produces both a source file and a class file:\fP \f3javac\fP determines whether the class file is out of date. If the class file is out of date, \f3javac\fP recompiles the source file and uses the updated class file. Otherwise, \f3javac\fP just uses the class file. 
.LP
\f3javac\fP considers a class file out of date only if it is older than the source file.  
.RE

.LP
.LP
\f3Note:\fP \  \f3javac\fP can silently compile source files not mentioned on the command line. Use the \f3\-verbose\fP option to trace automatic compilation.
.LP
.SH "OPTIONS"
.LP

.LP
.LP
The compiler has a set of standard options that are supported on the current development environment and will be supported in future releases. An additional set of non\-standard options are specific to the current virtual machine and compiler implementations and are subject to change in the future. Non\-standard options begin with \f3\-X\fP.
.LP
.SS 
Standard Options
.LP
.RS 3

.LP
.RS 3
.TP 3
\-classpath classpath 
Set the user class path, overriding the user class path in the \f3CLASSPATH\fP environment variable. If neither \f3CLASSPATH\fP or \f3\-classpath\fP is specified, the user class path consists of the current directory. See Setting the Class Path for more details. 
.LP
If the \f3\-sourcepath\fP option is not specified, the user class path is searched for both source files and class files.  
.LP
As a special convenience, a class path element containing a basename of \f2*\fP is considered equivalent to specifying a list of all the files in the directory with the extension \f2.jar\fP or \f2.JAR\fP (a java program cannot tell the difference between the two invocations).
.br
.br
For example, if directory \f2foo\fP contains \f2a.jar\fP and \f2b.JAR\fP, then the class path element \f2foo/*\fP is expanded to a \f2A.jar:b.JAR\fP, except that the order of jar files is unspecified. All jar files in the specified directory, even hidden ones, are included in the list. A classpath entry consisting simply of \f2*\fP expands to a list of all the jar files in the current directory. The \f2CLASSPATH\fP environment variable, where defined, will be similarly expanded. Any classpath wildcard expansion occurs before the Java virtual machine is started \-\- no Java program will ever see unexpanded wildcards except by querying the environment. For example; by invoking \f2System.getenv("CLASSPATH")\fP.   
.TP 3
\-Djava.ext.dirs=directories 
Override the location of installed extensions. 
.TP 3
\-Djava.endorsed.dirs=directories 
Override the location of endorsed standards path. 
.TP 3
\-d directory 
Set the destination directory for class files. The destination directory must already exist; javac will not create the destination directory. If a class is part of a package, \f3javac\fP puts the class file in a subdirectory reflecting the package name, creating directories as needed. For example, if you specify \f3\-d /home/myclasses\fP and the class is called \f2com.mypackage.MyClass\fP, then the class file is called \f2/home/myclasses/com/mypackage/MyClass.class\fP. 
.LP
If \f3\-d\fP is not specified, \f3javac\fP puts the class file in the same directory as the source file. 
.LP
\f3Note:\fP \  The directory specified by \f3\-d\fP is not automatically added to your user class path.  
.TP 3
\-deprecation 
Show a description of each use or override of a deprecated member or class. Without \f3\-deprecation\fP, \f3javac\fP shows the names of source files that use or override deprecated members or classes. \f3\-deprecation\fP is shorthand for \f3\-Xlint:deprecation\fP. 
.TP 3
\-encoding encoding 
Set the source file encoding name, such as \f2EUC\-JP and UTF\-8.\fP. If \f3\-encoding\fP is not specified, the platform default converter is used. 
.TP 3
\-g 
Generate all debugging information, including local variables. By default, only line number and source file information is generated. 
.TP 3
\-g:none 
Do not generate any debugging information. 
.TP 3
\-g:{keyword list} 
Generate only some kinds of debugging information, specified by a comma separated list of keywords. Valid keywords are: 
.RS 3
.TP 3
source 
Source file debugging information 
.TP 3
lines 
Line number debugging information 
.TP 3
vars 
Local variable debugging information 
.RE
.TP 3
\-help 
Print a synopsis of standard options. 
.TP 3
\-nowarn 
Disable warning messages. This has the same meaning as \f3\-Xlint:none\fP. 
.LP
.TP 3
\-source release 
Specifies the version of source code accepted. The following values for \f2release\fP are allowed: 
.RS 3
.TP 3
1.3 
The compiler does \f2not\fP support assertions, generics, or other language features introduced after JDK 1.3. 
.TP 3
1.4 
The compiler accepts code containing assertions, which were introduced in JDK 1.4. 
.TP 3
1.5 
The compiler accepts code containing generics and other language features introduced in JDK 5. This is the default. 
.TP 3
5 
Synonym for 1.5 
.RE
\f3Note:\fP No language changes were introduced in JDK 6, so the values \f31.6\fP and \f36\fP are not valid. 
.TP 3
\-sourcepath sourcepath 
Specify the source code path to search for class or interface definitions. As with the user class path, source path entries are separated by colons (\f3:\fP) and can be directories, JAR archives, or ZIP archives. If packages are used, the local path name within the directory or archive must reflect the package name. 
.LP
\f3Note:\fP \  Classes found through the classpath are subject to automatic recompilation if their sources are found.  
.TP 3
\-verbose 
Verbose output. This includes information about each class loaded and each source file compiled.  
.TP 3
\-X 
Display information about non\-standard options and exit. 
.RE

.LP
.RE
.SS 
Cross\-Compilation Options
.LP
.RS 3

.LP
.LP
By default, classes are compiled against the bootstrap and extension classes of the platform that \f3javac\fP shipped with. But \f3javac\fP also supports \f2cross\-compiling\fP, where classes are compiled against a bootstrap and extension classes of a different Java platform implementation. It is important to use \f3\-bootclasspath\fP and \f3\-extdirs\fP when cross\-compiling; see Cross\-Compilation Example below.
.LP
.RS 3
.TP 3
\-target version 
Generate class files that target a specified version of the VM. Class files will run on the specified target and on later versions, but not on earlier versions of the VM. Valid targets are \f31.1\fP \f31.2\fP \f31.3\fP \f31.4\fP \f31.5\fP (also \f35\fP) and \f31.6\fP (also \f36\fP). 
.LP
The default for \f3\-target\fP depends on the value of \f3\-source\fP: 
.RS 3
.TP 2
o
If \-source is \f3not specified\fP, the value of \-target is \f31.6\fP 
.TP 2
o
If \-source is \f31.3\fP, the value of \-target is \f31.1\fP 
.TP 2
o
For \f3all other values\fP of \-source, the value of \-target is the value of \f3\-source\fP. 
.RE
.TP 3
\-bootclasspath bootclasspath 
Cross\-compile against the specified set of boot classes. As with the user class path, boot class path entries are separated by colons (\f3:\fP) and can be directories, JAR archives, or ZIP archives. 
.TP 3
\-extdirs directories 
Cross\-compile against the specified extension directories. \f2Directories\fP is a colon\-separated list of directories. Each JAR archive in the specified directories is searched for class files. 
.RE

.LP
.RE
.SS 
Non\-Standard Options
.LP
.RS 3

.LP
.RS 3
.TP 3
\-Xbootclasspath/p:path 
Prepend to the bootstrap class path. 
.TP 3
\-Xbootclasspath/a:path 
Append to the bootstrap class path. 
.TP 3
\-Xbootclasspath/:path 
Override location of bootstrap class files. 
.TP 3
\-Xlint 
Enable all recommended warnings. In this release, all available warnings are recommended. 
.TP 3
\-Xlint:none 
Disable all warnings not mandated by the Java Language Specification. 
.TP 3
\-Xlint:\-xxx 
Disable warning \f3xxx\fP, where \f3xxx\fP is one of the warning names supported for \f3\-Xlint:xxx\fP, below 
.TP 3
\-Xlint:unchecked 
Give more detail for unchecked conversion warnings that are mandated by the Java Language Specification. 
.TP 3
\-Xlint:path 
Warn about nonexistent path (classpath, sourcepath, etc) directories. 
.TP 3
\-Xlint:serial 
Warn about missing \f2serialVersionUID\fP definitions on serializable classes. 
.TP 3
\-Xlint:finally 
Warn about \f2finally\fP clauses that cannot complete normally. 
.TP 3
\-Xlint:fallthrough 
Check \f2switch\fP blocks for fall\-through cases and provide a warning message for any that are found. Fall\-through cases are cases in a \f2switch\fP block, other than the last case in the block, whose code does not include a \f2break\fP statement, allowing code execution to "fall through" from that case to the next case. For example, the code following the \f2case 1\fP label in this \f2switch\fP block does not contain a \f2break\fP statement: 
.RS 3

.LP
.nf
\f3
.fl
switch (x) {
.fl
case 1:
.fl
       System.out.println("1");
.fl
       //  No  break;  statement here.
.fl
case 2:
.fl
       System.out.println("2");
.fl
}
.fl
\fP
.fi
.RE
If the \f2\-Xlint:fallthrough\fP flag were used when compiling this code, the compiler would emit a warning about "possible fall\-through into case," along with the line number of the case in question. 
.TP 3
\-Xmaxerrors number 
Set the maximum number of errors to print. 
.TP 3
\-Xmaxwarns number 
Set the maximum number of warnings to print. 
.TP 3
\-Xstdout filename 
Send compiler messages to the named file. By default, compiler messages go to \f2System.err\fP. 
.RE

.LP
.RE
.SS 
The \-J Option
.LP
.RS 3

.LP
.RS 3
.TP 3
\-Joption 
Pass \f2option\fP to the \f3java\fP launcher called by \f3javac\fP. For example, \f3\-J\-Xms48m\fP sets the startup memory to 48 megabytes. Although it does not begin with \f3\-X\fP, it is not a `standard option' of \f3javac\fP. It is a common convention for \f3\-J\fP to pass options to the underlying VM executing applications written in Java. 
.LP
\f3Note:\fP \  \f3CLASSPATH\fP, \f3\-classpath\fP, \f3\-bootclasspath\fP, and \f3\-extdirs\fP do \f2not\fP specify the classes used to run \f3javac\fP. Fiddling with the implementation of the compiler in this way is usually pointless and always risky. If you do need to do this, use the \f3\-J\fP option to pass through options to the underlying \f3java\fP launcher.  
.RE

.LP
.RE
.SH "COMMAND LINE ARGUMENT FILES"
.LP

.LP
.LP
To shorten or simplify the javac command line, you can specify one or more files that themselves contain arguments to the \f2javac\fP command (except \f2\-J\fP options). This enables you to create javac commands of any length on any operating system.
.LP
.LP
An argument file can include javac options and source filenames in any combination. The arguments within a file can be space\-separated or newline\-separated. If a filename contains embedded spaces, put the whole filename in double quotes.
.LP
.LP
Filenames within an argument file are relative to the current directory, not the location of the argument file. Wildcards (*) are not allowed in these lists (such as for specifying \f2*.java\fP). Use of the '\f2@\fP' character to recursively interpret files is not supported. The \f2\-J\fP options are not supported because they are passed to the launcher, which does not support argument files.
.LP
.LP
When executing javac, pass in the path and name of each argument file with the '\f2@\fP' leading character. When javac encounters an argument beginning with the character `\f2@\fP', it expands the contents of that file into the argument list.
.LP
.SS 
Example \- Single Arg File
.LP
.LP
You could use a single argument file named "\f2argfile\fP" to hold all javac arguments:
.LP
.nf
\f3
.fl
  C:> \fP\f3javac @argfile\fP
.fl
.fi

.LP
.LP
This argument file could contain the contents of both files shown in the next example.
.LP
.SS 
Example \- Two Arg Files
.LP
.LP
You can create two argument files \-\- one for the javac options and the other for the source filenames: (Notice the following lists have no line\-continuation characters.)
.LP
.LP
Create a file named "\f2options\fP" containing:
.LP
.nf
\f3
.fl
     \-d classes
.fl
     \-g
.fl
     \-sourcepath \\java\\pubs\\ws\\1.3\\src\\share\\classes
.fl
\fP
.fi

.LP
.LP
Create a file named "\f2classes\fP" containing:
.LP
.nf
\f3
.fl
     MyClass1.java
.fl
     MyClass2.java
.fl
     MyClass3.java
.fl
\fP
.fi

.LP
.LP
You would then run javac with:
.LP
.nf
\f3
.fl
  % \fP\f3javac @options @classes\fP
.fl
.fi

.LP
.SS 
Example \- Arg Files with Paths
.LP
.LP
The argument files can have paths, but any filenames inside the files are relative to the current working directory (not \f2path1\fP or \f2path2\fP):
.LP
.nf
\f3
.fl
  % \fP\f3javac @path1/options @path2/classes\fP
.fl
.fi

.LP
.SH "PROGRAMMATIC INTERFACE"
.LP
.LP
The \f2com.sun.tools.javac.Main\fP class provides two static methods to invoke the compiler from a program:
.LP
.nf
\f3
.fl
public static int compile(String[] args);
.fl
public static int compile(String[] args, PrintWriter out);
.fl
\fP
.fi

.LP
.LP
The \f2args\fP parameter represents any of the command line arguments that would normally be passed to the javac program and are outlined in the above Synopsis section.
.LP
.LP
The \f2out\fP parameter indicates where the compiler's diagnostic output is directed.
.LP
.LP
The return value is equivalent to the exit value from javac.
.LP
.LP
Note that all \f3other\fP classes and methods found in a package whose name starts with \f2com.sun.tools.javac\fP (informally known as sub\-packages of \f2com.sun.tools.javac\fP) are strictly internal and subject to change at any time.
.LP
.SH "EXAMPLES"
.LP
.SS 
Compiling a Simple Program
.LP
.RS 3

.LP
.LP
One source file, \f2Hello.java\fP, defines a class called \f3greetings.Hello\fP. The \f2greetings\fP directory is the package directory both for the source file and the class file and is off the current directory. This allows us to use the default user class path. It also makes it unnecessary to specify a separate destination directory with \f3\-d\fP.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3ls\fP
.fl
greetings/
.fl
% \f3ls greetings\fP
.fl
Hello.java
.fl
% \f3cat greetings/Hello.java\fP
.fl
package greetings;
.fl

.fl
public class Hello {
.fl
    public static void main(String[] args) {
.fl
        for (int i=0; i < args.length; i++) {
.fl
            System.out.println("Hello " + args[i]);
.fl
        }
.fl
    }
.fl
}
.fl
% \f3javac greetings/Hello.java\fP
.fl
% \f3ls greetings\fP
.fl
Hello.class   Hello.java
.fl
% \f3java greetings.Hello World Universe Everyone\fP
.fl
Hello World
.fl
Hello Universe
.fl
Hello Everyone
.fl
.fi
.RE

.LP
.RE
.SS 
Compiling Multiple Source Files
.LP
.RS 3

.LP
.LP
This example compiles all the source files in the package \f2greetings\fP.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3ls\fP
.fl
greetings/
.fl
% \f3ls greetings\fP
.fl
Aloha.java         GutenTag.java      Hello.java         Hi.java
.fl
% \f3javac greetings/*.java\fP
.fl
% \f3ls greetings\fP
.fl
Aloha.class         GutenTag.class      Hello.class         Hi.class
.fl
Aloha.java          GutenTag.java       Hello.java          Hi.java
.fl

.fl
.fi
.RE

.LP
.RE
.SS 
Specifying a User Class Path
.LP
.RS 3

.LP
.LP
Having changed one of the source files in the previous example, we recompile it:
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3pwd\fP
.fl
/examples
.fl
% \f3javac greetings/Hi.java\fP
.fl
.fi
.RE

.LP
.LP
Since \f2greetings.Hi\fP refers to other classes in the \f2greetings\fP package, the compiler needs to find these other classes. The example above works, because our default user class path happens to be the directory containing the package directory. But suppose we want to recompile this file and not worry about which directory we're in? Then we need to add \f2/examples\fP to the user class path. We can do this by setting \f3CLASSPATH\fP, but here we'll use the \f3\-classpath\fP option.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3javac \-classpath /examples /examples/greetings/Hi.java\fP
.fl
.fi
.RE

.LP
.LP
If we change \f2greetings.Hi\fP again, to use a banner utility, that utility also needs to be accessible through the user class path.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3javac \-classpath /examples:/lib/Banners.jar \\   
.fl
                   /examples/greetings/Hi.java\fP
.fl
.fi
.RE

.LP
.LP
To execute a class in \f2greetings\fP, we need access both to \f2greetings\fP and to the classes it uses.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3java \-classpath /examples:/lib/Banners.jar greetings.Hi\fP
.fl
.fi
.RE

.LP
.RE
.SS 
Separating Source Files and Class Files
.LP
.RS 3

.LP
.LP
It often makes sense to keep source files and class files in separate directories, especially on large projects. We use \f3\-d\fP to indicate the separate class file destination. Since the source files are not in the user class path, we use \f3\-sourcepath\fP to help the compiler find them.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3ls\fP
.fl
classes/  lib/      src/
.fl
% \f3ls src\fP
.fl
farewells/
.fl
% \f3ls src/farewells\fP
.fl
Base.java      GoodBye.java
.fl
% \f3ls lib\fP
.fl
Banners.jar
.fl
% \f3ls classes\fP
.fl
% \f3javac \-sourcepath src \-classpath classes:lib/Banners.jar \\  
.fl
  src/farewells/GoodBye.java \-d classes\fP
.fl
% \f3ls classes\fP
.fl
farewells/
.fl
% \f3ls classes/farewells\fP
.fl
Base.class      GoodBye.class
.fl

.fl
.fi
.RE

.LP
.LP
\f3Note:\fP \  The compiler compiled \f2src/farewells/Base.java\fP, even though we didn't specify it on the command line. To trace automatic compiles, use the \f3\-verbose\fP option.
.LP
.RE
.SS 
Cross\-Compilation Example
.LP
.RS 3

.LP
.LP
Here we use \f3javac\fP to compile code that will run on a 1.4 VM.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3javac \-target 1.4 \-bootclasspath jdk1.4.2/lib/classes.zip \\  
.fl
        \-extdirs "" OldCode.java\fP
.fl
.fi
.RE

.LP
.LP
The \f3\-target 1.4\fP option ensures that the generated class files will be compatible with 1.4 VMs. By default, \f3javac\fP compiles for JDK 6.
.LP
.LP
The Java Platform JDK's \f3javac\fP would also by default compile against its own bootstrap classes, so we need to tell \f3javac\fP to compile against JDK 1.4 bootstrap classes instead. We do this with \f3\-bootclasspath\fP and \f3\-extdirs\fP. Failing to do this might allow compilation against a Java Platform API that would not be present on a 1.4 VM and would fail at runtime.
.LP
.RE
.SH "SEE ALSO"
.LP

.LP
.RS 3
.TP 2
o
java \- the Java Application Launcher 
.TP 2
o
jdb \- Java Application Debugger 
.TP 2
o
javah \- C Header and Stub File Generator 
.TP 2
o
javap \- Class File Disassembler 
.TP 2
o
javadoc \- API Documentation Generator 
.TP 2
o
jar \- JAR Archive Tool 
.TP 2
o
.na
\f2The Java Extensions Framework\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/extensions/index.html 
.RE

.LP

.LP
 
